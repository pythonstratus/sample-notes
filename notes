# Databricks notebook source
from pyspark.sql.functions import *
from pyspark.sql.types import *

# COMMAND ----------
# Read large XML file using Spark XML reader
contract_df = spark.read \
    .format("xml") \
    .option("rootTag", "feed") \
    .option("rowTag", "ns0:entry") \
    .option("valueTag", "_value") \
    .option("attributePrefix", "_") \
    .load("/Volumes/tagging/fpds_raw/landing/fpds_output_2025-01-03.xml")

# COMMAND ----------
# Extract and transform the data with ALL mapped fields
processed_df = contract_df.select(
    # Basic Contract Information
    col("ns0:content.ns1:award.ns1:awardID.ns1:awardContractID.ns1:PIID").alias("piid"),
    col("ns0:content.ns1:award.ns1:awardID.ns1:awardContractID.ns1:agencyID._value").alias("agency_id"),
    col("ns0:content.ns1:award.ns1:awardID.ns1:awardContractID.ns1:agencyID._name").alias("agency_name"),
    col("ns0:content.ns1:award.ns1:awardID.ns1:awardContractID.ns1:modNumber").alias("mod_number"),
    
    # Referenced IDV Information
    col("ns0:content.ns1:award.ns1:awardID.ns1:referencedIDVID.ns1:PIID").alias("referenced_idv_piid"),
    col("ns0:content.ns1:award.ns1:awardID.ns1:referencedIDVID.ns1:agencyID._value").alias("referenced_idv_agency_id"),
    col("ns0:content.ns1:award.ns1:awardID.ns1:referencedIDVID.ns1:agencyID._name").alias("referenced_idv_agency_name"),
    
    # Contract Dates
    col("ns0:content.ns1:award.ns1:relevantContractDates.ns1:signedDate").alias("signed_date"),
    col("ns0:content.ns1:award.ns1:relevantContractDates.ns1:effectiveDate").alias("effective_date"),
    col("ns0:content.ns1:award.ns1:relevantContractDates.ns1:currentCompletionDate").alias("completion_date"),
    col("ns0:content.ns1:award.ns1:relevantContractDates.ns1:ultimateCompletionDate").alias("ultimate_completion_date"),
    
    # Financial Information
    col("ns0:content.ns1:award.ns1:dollarValues.ns1:obligatedAmount").alias("obligated_amount"),
    col("ns0:content.ns1:award.ns1:dollarValues.ns1:baseAndExercisedOptionsValue").alias("base_and_exercised_options_value"),
    col("ns0:content.ns1:award.ns1:dollarValues.ns1:baseAndAllOptionsValue").alias("base_and_all_options_value"),
    col("ns0:content.ns1:award.ns1:totalDollarValues.ns1:totalObligatedAmount").alias("total_obligated_amount"),
    
    # Vendor Information
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorHeader.ns1:vendorName").alias("vendor_name"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorHeader.ns1:vendorAlternateName").alias("vendor_alternate_name"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorHeader.ns1:vendorDoingAsBusinessName").alias("vendor_dba_name"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorLocation.ns1:streetAddress").alias("street_address"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorLocation.ns1:city").alias("city"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorLocation.ns1:state._value").alias("state"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorLocation.ns1:ZIPCode._value").alias("zip_code"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorLocation.ns1:phoneNo").alias("phone_no"),
    
    # Vendor Demographics
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorSocioEconomicIndicators.ns1:isSmallBusiness").alias("is_small_business"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorSocioEconomicIndicators.ns1:isVeteranOwned").alias("is_veteran_owned"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorSocioEconomicIndicators.ns1:isWomenOwned").alias("is_women_owned"),
    col("ns0:content.ns1:award.ns1:vendor.ns1:vendorSiteDetails.ns1:vendorSocioEconomicIndicators.ns1:isMinorityOwned.ns1:isMinorityOwned").alias("is_minority_owned"),
    
    # Contract Details
    col("ns0:content.ns1:award.ns1:contractData.ns1:contractActionType._value").alias("contract_action_type"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:typeOfContractPricing._value").alias("contract_pricing_type"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:reasonForModification._value").alias("modification_reason"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:nationalInterestActionCode._value").alias("national_interest_code"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:descriptionOfContractRequirement").alias("contract_description"),
    
    # Competition Information
    col("ns0:content.ns1:award.ns1:competition.ns1:extentCompeted._value").alias("extent_competed"),
    col("ns0:content.ns1:award.ns1:competition.ns1:solicitationProcedures._value").alias("solicitation_procedures"),
    col("ns0:content.ns1:award.ns1:competition.ns1:typeOfSetAside._value").alias("set_aside_type"),
    col("ns0:content.ns1:award.ns1:competition.ns1:evaluatedPreference._value").alias("evaluated_preference"),
    col("ns0:content.ns1:award.ns1:competition.ns1:numberOfOffersReceived").alias("number_of_offers"),
    
    # Product/Service Information
    col("ns0:content.ns1:award.ns1:productOrServiceInformation.ns1:productOrServiceCode._value").alias("product_service_code"),
    col("ns0:content.ns1:award.ns1:productOrServiceInformation.ns1:productOrServiceCode._description").alias("product_service_description"),
    col("ns0:content.ns1:award.ns1:productOrServiceInformation.ns1:principalNAICSCode._value").alias("naics_code"),
    col("ns0:content.ns1:award.ns1:productOrServiceInformation.ns1:principalNAICSCode._description").alias("naics_description"),
    
    # Place of Performance
    col("ns0:content.ns1:award.ns1:placeOfPerformance.ns1:principalPlaceOfPerformance.ns1:stateCode._value").alias("pop_state"),
    col("ns0:content.ns1:award.ns1:placeOfPerformance.ns1:principalPlaceOfPerformance.ns1:countryCode._value").alias("pop_country"),
    col("ns0:content.ns1:award.ns1:placeOfPerformance.ns1:placeOfPerformanceZIPCode._value").alias("pop_zip_code"),
    
    # Legislative Mandates
    col("ns0:content.ns1:award.ns1:legislativeMandates.ns1:ClingerCohenAct._value").alias("clinger_cohen_act"),
    col("ns0:content.ns1:award.ns1:legislativeMandates.ns1:laborStandards._value").alias("labor_standards"),
    
    # Transaction Information
    col("ns0:content.ns1:award.ns1:transactionInformation.ns1:createdBy").alias("created_by"),
    col("ns0:content.ns1:award.ns1:transactionInformation.ns1:createdDate").alias("created_date"),
    col("ns0:content.ns1:award.ns1:transactionInformation.ns1:lastModifiedBy").alias("last_modified_by"),
    col("ns0:content.ns1:award.ns1:transactionInformation.ns1:lastModifiedDate").alias("last_modified_date"),
    col("ns0:content.ns1:award.ns1:transactionInformation.ns1:status._value").alias("status")
)

# Clean up the data
cleaned_df = processed_df \
    # Date conversions
    .withColumn("signed_date", to_timestamp("signed_date")) \
    .withColumn("effective_date", to_timestamp("effective_date")) \
    .withColumn("completion_date", to_timestamp("completion_date")) \
    .withColumn("ultimate_completion_date", to_timestamp("ultimate_completion_date")) \
    .withColumn("created_date", to_timestamp("created_date")) \
    .withColumn("last_modified_date", to_timestamp("last_modified_date")) \
    \
    # Fix monetary amounts
    .withColumn("obligated_amount", format_number(col("obligated_amount").cast("double"), 2)) \
    .withColumn("base_and_exercised_options_value", format_number(col("base_and_exercised_options_value").cast("double"), 2)) \
    .withColumn("base_and_all_options_value", format_number(col("base_and_all_options_value").cast("double"), 2)) \
    .withColumn("total_obligated_amount", format_number(col("total_obligated_amount").cast("double"), 2)) \
    \
    # Clean up strings
    .withColumn("zip_code", trim(col("zip_code"))) \
    .withColumn("pop_zip_code", trim(col("pop_zip_code"))) \
    .withColumn("state", trim(col("state"))) \
    .withColumn("city", trim(col("city"))) \
    .withColumn("vendor_name", trim(col("vendor_name"))) \
    .withColumn("phone_no", trim(col("phone_no"))) \
    \
    # Clean up contract description
    .withColumn("contract_description", 
        regexp_replace(
            regexp_replace(
                regexp_replace(col("contract_description"), 
                    "IGF::OT::IGF\\s*", ""
                ),
                "\\s+", " "
            ),
            "^\\s*|\\s*$", ""
        )
    )

# Display first 100 rows
display(cleaned_df.head(100))
