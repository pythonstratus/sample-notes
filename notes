processed_df = contract_df.select(
    # Basic Contract Information
    col("ns0:content.ns1:award.ns1:awardID.ns1:awardContractID.ns1:PIID").alias("piid"),
    col("ns0:content.ns1:award.ns1:awardID.ns1:awardContractID.ns1:agencyID._value").alias("agency_id"),
    col("ns0:content.ns1:award.ns1:awardID.ns1:awardContractID.ns1:agencyID._name").alias("agency_name"),
    
    # Contract Details from XML
    col("ns0:content.ns1:award.ns1:contractData.ns1:contractActionType._description").alias("contract_action_type"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:typeOfContractPricing._description").alias("contract_pricing_type"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:majorProgramCode").alias("major_program_code"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:nationalInterestActionCode._description").alias("national_interest_code"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:descriptionOfContractRequirement").alias("contract_description"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:inherentlyGovernmentalFunction._description").alias("inherently_governmental_function"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:consolidatedContract._description").alias("consolidated_contract"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:multiYearContract._description").alias("multi_year_contract"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:contingencyHumanitarianPeacekeepingOperation._description").alias("contingency_operation"),
    
    # Treasury Account Information
    col("ns0:content.ns1:award.ns1:contractData.ns1:listOfTreasuryAccounts.ns1:treasuryAccount.ns1:treasuryAccountSymbol.ns1:agencyIdentifier").alias("treasury_agency_id"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:listOfTreasuryAccounts.ns1:treasuryAccount.ns1:treasuryAccountSymbol.ns1:mainAccountCode").alias("treasury_main_account"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:listOfTreasuryAccounts.ns1:treasuryAccount.ns1:treasuryAccountSymbol.ns1:subAccountCode").alias("treasury_sub_account"),
    
    # Referenced IDV Information
    col("ns0:content.ns1:award.ns1:contractData.ns1:referencedIDVMultipleOrSingle._description").alias("referenced_idv_multiple_or_single"),
    col("ns0:content.ns1:award.ns1:contractData.ns1:referencedIDVType._description").alias("referenced_idv_type"),
    
    # Financial Information
    col("ns0:content.ns1:award.ns1:dollarValues.ns1:obligatedAmount").alias("obligated_amount"),
    col("ns0:content.ns1:award.ns1:dollarValues.ns1:baseAndExercisedOptionsValue").alias("base_and_exercised_options_value"),
    col("ns0:content.ns1:award.ns1:dollarValues.ns1:baseAndAllOptionsValue").alias("base_and_all_options_value")
)

# Clean up the data
cleaned_df = processed_df \
    .withColumn("obligated_amount", format_number(col("obligated_amount").cast("double"), 2)) \
    .withColumn("base_and_exercised_options_value", format_number(col("base_and_exercised_options_value").cast("double"), 2)) \
    .withColumn("base_and_all_options_value", format_number(col("base_and_all_options_value").cast("double"), 2)) \
    .withColumn("contract_description", trim(col("contract_description")))

# Get counts and display
num_rows = cleaned_df.count()
num_cols = len(cleaned_df.columns)
print(f"Number of rows: {num_rows}")
print(f"Number of columns: {num_cols}")

# Display first 100 rows
display(cleaned_df.head(100))
