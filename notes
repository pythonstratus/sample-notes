from pyspark.sql import SparkSession
from datetime import datetime
import pandas as pd
from IPython.display import display, HTML, Markdown
import json

def generate_schema_readme(schema_name="bk_MPO"):
    """
    Generate a comprehensive README dashboard for a Databricks schema
    """
    spark = SparkSession.builder.getOrCreate()
    
    def get_table_info():
        """Get information about all tables in the schema"""
        query = f"""
        SELECT table_name, 
               creation_time,
               last_modified_time
        FROM {schema_name}.INFORMATION_SCHEMA.TABLES
        """
        return spark.sql(query).toPandas()
    
    def get_table_stats(table_name):
        """Get detailed statistics for a specific table"""
        full_table_name = f"{schema_name}.{table_name}"
        df = spark.table(full_table_name)
        
        # Get row count
        row_count = df.count()
        
        # Get column information
        columns = df.columns
        col_count = len(columns)
        
        # Get sample data types
        dtypes = {col: str(df.schema[col].dataType) for col in columns}
        
        # Get last updated timestamp using a sample row
        last_updated = df.agg({"*": "max"}).collect()[0][0]
        
        return {
            "row_count": row_count,
            "column_count": col_count,
            "columns": dtypes,
            "last_updated": last_updated
        }
    
    # Get all tables
    tables_df = get_table_info()
    
    # Generate HTML output
    html_output = f"""
    <div style="padding: 20px;">
        <h1>{schema_name} Schema Documentation</h1>
        <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h2>Schema Overview</h2>
        <ul>
            <li>Total Tables: {len(tables_df)}</li>
            <li>Last Schema Update: {tables_df['last_modified_time'].max()}</li>
        </ul>
        
        <h2>Table Details</h2>
    """
    
    # Generate detailed table information
    for _, row in tables_df.iterrows():
        table_name = row['table_name']
        stats = get_table_stats(table_name)
        
        html_output += f"""
        <details>
            <summary style="cursor: pointer; padding: 10px; background-color: #f0f0f0; margin: 5px 0;">
                <strong>{table_name}</strong> - {stats['row_count']:,} rows, {stats['column_count']} columns
            </summary>
            <div style="padding: 10px; margin-left: 20px;">
                <p>Created: {row['creation_time']}</p>
                <p>Last Modified: {row['last_modified_time']}</p>
                <p>Last Data Update: {stats['last_updated']}</p>
                
                <h4>Columns:</h4>
                <table style="width: 100%; border-collapse: collapse;">
                    <tr>
                        <th style="text-align: left; padding: 5px; border: 1px solid #ddd;">Column Name</th>
                        <th style="text-align: left; padding: 5px; border: 1px solid #ddd;">Data Type</th>
                    </tr>
        """
        
        for col_name, dtype in stats['columns'].items():
            html_output += f"""
                    <tr>
                        <td style="padding: 5px; border: 1px solid #ddd;">{col_name}</td>
                        <td style="padding: 5px; border: 1px solid #ddd;">{dtype}</td>
                    </tr>
            """
            
        html_output += """
                </table>
            </div>
        </details>
        """
    
    html_output += "</div>"
    
    # Display the dashboard
    display(HTML(html_output))

# Example usage
generate_schema_readme("bk_MPO")

# Optional: Save the documentation to a notebook-level variable for persistence
dbutils.notebook.exit({"last_generated": datetime.now().isoformat()})
