-- Safety check: Enable cascading drops
SET spark.sql.legacy.allowNonEmptyLocationInTruncate = true;

-- Function to get all tables in a schema
CREATE OR REPLACE FUNCTION get_tables_in_schema(schema_name STRING)
RETURNS TABLE (table_name STRING)
RETURN
  SELECT table_name 
  FROM information_schema.tables 
  WHERE table_schema = schema_name;

-- Procedure to drop all tables in a schema
CREATE OR REPLACE PROCEDURE drop_schema_contents(schema_name STRING)
LANGUAGE SQL
AS
BEGIN
  -- Get list of all tables in the schema
  FOR table_record IN (SELECT * FROM get_tables_in_schema(schema_name))
  DO
    -- Drop each table
    EXECUTE IMMEDIATE 'DROP TABLE IF EXISTS ' || schema_name || '.' || table_record.table_name || ' CASCADE';
  END FOR;
END;

-- Main cleanup script
-- Replace 'your_schema_name' with actual schema name
DECLARE @schema_name STRING = 'your_schema_name';

-- Drop all tables first
CALL drop_schema_contents(@schema_name);

-- Finally drop the schema itself
EXECUTE IMMEDIATE 'DROP SCHEMA IF EXISTS ' || @schema_name || ' CASCADE';

-- Verification query
SELECT SCHEMA_NAME 
FROM information_schema.schemata 
WHERE SCHEMA_NAME = @schema_name;
