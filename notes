from pyspark.sql import SparkSession

def print_table_inventory():
    spark = SparkSession.builder.getOrCreate()
    
    try:
        col_widths = {
            'catalog': 20,
            'schema': 20,
            'table': 30,
            'type': 15,
            'format': 15,
            'location': 50
        }
        
        header = "{:<{w[catalog]}} {:<{w[schema]}} {:<{w[table]}} {:<{w[type]}} {:<{w[format]}} {:<{w[location]}}".format(
            "Catalog", "Schema", "Table Name", "Type", "Format", "Location", w=col_widths
        )
        
        print("\n" + "=" * (sum(col_widths.values()) + 5))
        print(header)
        print("=" * (sum(col_widths.values()) + 5))
        
        # Get tables with properties
        tables = spark.sql("SHOW TABLES FROM staging.bk_mpo").collect()
        
        for table in tables:
            table_name = table.tableName
            details = spark.sql(f"DESCRIBE DETAIL staging.bk_mpo.{table_name}").collect()[0]
            
            # Get table properties to determine if external
            table_props = spark.sql(f"SHOW TBLPROPERTIES staging.bk_mpo.{table_name}").collect()
            table_type = 'managed'  # default type
            
            for prop in table_props:
                if prop.key == 'EXTERNAL' and prop.value.lower() == 'true':
                    table_type = 'external'
                    break
            
            print("{:<{w[catalog]}} {:<{w[schema]}} {:<{w[table]}} {:<{w[type]}} {:<{w[format]}} {:<{w[location]}}".format(
                "hive_metastore",
                "staging.bk_mpo",
                table_name,
                table_type,
                details.format,
                details.location,
                w=col_widths
            ))
        
        print("=" * (sum(col_widths.values()) + 5))
                    
    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    print_table_inventory()
