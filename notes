from pyspark.sql import SparkSession
from datetime import datetime
from IPython.display import display, HTML
import pyspark.sql.functions as F

def generate_schema_readme(schema_name="bk_MPO", database="staging"):
    """
    Generate a comprehensive README dashboard for a Databricks schema
    """
    spark = SparkSession.builder.getOrCreate()
    
    def get_table_info():
        """Get information about all tables in the schema"""
        try:
            # Check for tables under the schema
            tables = spark.sql(f"SHOW TABLES IN {database}.{schema_name}")
            
            # Return empty list if no tables found
            if tables.count() == 0:
                print(f"No tables found in {database}.{schema_name}")
                return []
            
            # Convert to list of tuples (name, description)
            return [(row.tableName, "") for row in tables.collect()]
        except Exception as e:
            print(f"Error accessing schema {database}.{schema_name}: {str(e)}")
            return []
    
    def get_column_statistics(df, col_name, data_type):
        """Get relevant statistics based on column data type"""
        try:
            stats = {}
            
            # For numeric columns
            if any(t in data_type.lower() for t in ['int', 'double', 'decimal', 'float']):
                stats_df = df.agg(
                    F.count(col_name).alias('count'),
                    F.count(F.when(F.col(col_name).isNull(), True)).alias('null_count'),
                    F.min(col_name).alias('min'),
                    F.max(col_name).alias('max')
                ).collect()[0]
                
                total_count = stats_df['count']
                null_count = stats_df['null_count']
                
                stats['completeness'] = f"{((total_count - null_count) / total_count * 100):.1f}% populated"
                if null_count > 0:
                    stats['nulls'] = f"{null_count:,} nulls"
                stats['range'] = f"Range: {stats_df['min']} to {stats_df['max']}"
                
            # For string columns
            elif 'string' in data_type.lower():
                stats_df = df.agg(
                    F.count(col_name).alias('count'),
                    F.count(F.when(F.col(col_name).isNull(), True)).alias('null_count'),
                    F.countDistinct(col_name).alias('distinct_count')
                ).collect()[0]
                
                total_count = stats_df['count']
                null_count = stats_df['null_count']
                distinct_count = stats_df['distinct_count']
                
                stats['completeness'] = f"{((total_count - null_count) / total_count * 100):.1f}% populated"
                if null_count > 0:
                    stats['nulls'] = f"{null_count:,} nulls"
                stats['cardinality'] = f"{distinct_count:,} unique values"
                
            # For timestamp/date columns
            elif any(t in data_type.lower() for t in ['timestamp', 'date']):
                stats_df = df.agg(
                    F.count(col_name).alias('count'),
                    F.count(F.when(F.col(col_name).isNull(), True)).alias('null_count'),
                    F.min(col_name).alias('min_date'),
                    F.max(col_name).alias('max_date')
                ).collect()[0]
                
                total_count = stats_df['count']
                null_count = stats_df['null_count']
                
                stats['completeness'] = f"{((total_count - null_count) / total_count * 100):.1f}% populated"
                if null_count > 0:
                    stats['nulls'] = f"{null_count:,} nulls"
                stats['timespan'] = f"From {stats_df['min_date']} to {stats_df['max_date']}"
            
            return " | ".join(stats.values())
            
        except Exception as e:
            return f"Error calculating statistics: {str(e)}"
    
    def get_table_stats(table_name):
        """Get detailed statistics for a specific table"""
        full_table_name = f"{database}.{schema_name}.{table_name}"
        
        # Verify table exists before attempting to get statistics
        try:
            table_exists = spark.sql(f"SHOW TABLES IN {database}.{schema_name} LIKE '{table_name}'").count() > 0
            if not table_exists:
                raise Exception(f"Table {full_table_name} does not exist")
            
            df = spark.table(full_table_name)
        except Exception as e:
            raise Exception(f"Error accessing table {full_table_name}: {str(e)}")
        
        # Get basic table info
        row_count = df.count()
        columns = df.columns
        col_count = len(columns)
        
        # Get data types and statistics
        schema_info = {}
        for field in df.schema:
            col_name = field.name
            data_type = str(field.dataType)
            statistics = get_column_statistics(df, col_name, data_type)
            schema_info[col_name] = {
                'data_type': data_type,
                'statistics': statistics
            }
        
        # Get last modified time
        try:
            history_df = spark.sql(f"DESCRIBE HISTORY {full_table_name}")
            last_modified = history_df.select('timestamp').first()[0] if history_df.count() > 0 else "No history available"
        except Exception:
            last_modified = "History not available"
            
        return {
            "row_count": row_count,
            "column_count": col_count,
            "columns": schema_info,
            "last_modified": last_modified
        }
    
    # Generate HTML output
    tables = get_table_info()
    html_output = f"""
    <div style="padding: 20px;">
        <h1>{schema_name} Schema Documentation</h1>
        <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h2>Schema Overview</h2>
        <ul>
            <li>Total Tables: {len(tables)}</li>
            <li>Database: {database}</li>
            <li>Schema: {schema_name}</li>
        </ul>
        
        <h2>Table Details</h2>
    """
    
    # Generate detailed table information
    for table_name, description in tables:
        try:
            stats = get_table_stats(table_name)
            
            html_output += f"""
            <details>
                <summary style="cursor: pointer; padding: 10px; background-color: #f0f0f0; margin: 5px 0;">
                    <strong>{table_name}</strong> - {stats['row_count']:,} rows, {stats['column_count']} columns
                </summary>
                <div style="padding: 10px; margin-left: 20px;">
                    <p>Description: {description if description else 'No description available'}</p>
                    <p>Last Modified: {stats['last_modified']}</p>
                    
                    <h4>Columns:</h4>
                    <table style="width: 100%; border-collapse: collapse;">
                        <tr>
                            <th style="text-align: left; padding: 5px; border: 1px solid #ddd;">Column Name</th>
                            <th style="text-align: left; padding: 5px; border: 1px solid #ddd;">Data Type</th>
                            <th style="text-align: left; padding: 5px; border: 1px solid #ddd;">Statistics</th>
                        </tr>
            """
            
            for col_name, info in stats['columns'].items():
                html_output += f"""
                        <tr>
                            <td style="padding: 5px; border: 1px solid #ddd;">{col_name}</td>
                            <td style="padding: 5px; border: 1px solid #ddd;">{info['data_type']}</td>
                            <td style="padding: 5px; border: 1px solid #ddd;">{info['statistics']}</td>
                        </tr>
                """
                
            html_output += """
                    </table>
                </div>
            </details>
            """
        except Exception as e:
            html_output += f"""
            <details>
                <summary style="cursor: pointer; padding: 10px; background-color: #ffebee; margin: 5px 0;">
                    <strong>{table_name}</strong> - Error loading table details
                </summary>
                <div style="padding: 10px; margin-left: 20px;">
                    <p>Error: {str(e)}</p>
                </div>
            </details>
            """
    
    html_output += "</div>"
    display(HTML(html_output))

# Example usage
# generate_schema_readme("bk_MPO", "staging")
