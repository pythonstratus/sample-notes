-- Check distinct as_of_month values
SELECT DISTINCT as_of_month 
FROM bk_mpo_raw.heloc 
ORDER BY as_of_month;

-- Verify source_metadata columns
SELECT source_metadata.file_path, source_metadata.file_modification_time
FROM bk_mpo_raw.heloc
WHERE as_of_month = '<your_as_of_month>'
LIMIT 5;



-- Check recent metadata updates
SELECT *
FROM bk_mpo.raw_source_metadata
ORDER BY process_date DESC
LIMIT 10;

-- Check if reprocess flag is set correctly
SELECT file_path, reprocess
FROM bk_mpo.raw_source_metadata
WHERE file_path = '<your_file_path>';


-- Compare raw and silver table counts
SELECT 
    r.as_of_month,
    COUNT(*) as raw_count,
    (SELECT COUNT(*) 
     FROM bk_mpo.heloc s 
     WHERE s.as_of_month = r.as_of_month) as silver_count
FROM bk_mpo_raw.heloc r
GROUP BY r.as_of_month
ORDER BY r.as_of_month;

-- Check for duplicates in silver table
SELECT as_of_month, COUNT(*)
FROM bk_mpo.heloc
GROUP BY as_of_month
HAVING COUNT(*) > 0;


-- Check specific file processing status
SELECT *
FROM bk_mpo.raw_source_metadata
WHERE file_path = '<your_file_path>';

-- Check records for a specific file
SELECT COUNT(*) 
FROM bk_mpo.heloc
WHERE file_path = '<your_file_path>';



-- Check the EXCEPT query results
SELECT DISTINCT mcdash_loan_identifier, as_of_month
FROM (
    SELECT mcdash_loan_identifier, as_of_month
    FROM {raw_database}.{raw_table_name}
    EXCEPT
    SELECT mcdash_loan_identifier, as_of_month
    FROM {silver_database}.{silver_table_name}
)
ORDER BY as_of_month;

-- Count records by as_of_month in both tables
SELECT 
    'raw' as source,
    as_of_month,
    COUNT(*) as record_count
FROM {raw_database}.{raw_table_name}
GROUP BY as_of_month
UNION ALL
SELECT 
    'silver' as source,
    as_of_month,
    COUNT(*) as record_count
FROM {silver_database}.{silver_table_name}
GROUP BY as_of_month
ORDER BY as_of_month, source;



-- Check recent metadata updates with detailed status
SELECT 
    process_date,
    file_path,
    file_process_state,
    rows_inserted,
    reprocess,
    last_error_msg
FROM {metadata_table_name}
WHERE process_date >= current_date() - INTERVAL 7 DAYS
ORDER BY process_date DESC;

-- Check failed processes
SELECT *
FROM {metadata_table_name}
WHERE file_process_state = 'FAILED'
ORDER BY process_date DESC
LIMIT 10;


-- Check processing results by as_of_month
WITH monthly_stats AS (
    SELECT 
        as_of_month,
        COUNT(*) as record_count,
        MAX(file_modification_time) as latest_modification
    FROM {silver_database}.{silver_table_name}
    GROUP BY as_of_month
)
SELECT 
    m.*,
    meta.file_process_state,
    meta.rows_inserted,
    meta.last_error_msg
FROM monthly_stats m
LEFT JOIN {metadata_table_name} meta
    ON meta.process_date = (
        SELECT MAX(process_date) 
        FROM {metadata_table_name} 
        WHERE file_path LIKE CONCAT('%', m.as_of_month, '%')
    )
ORDER BY as_of_month DESC;


-- Check records that should be updated
SELECT a.*, b.file_modification_time as existing_modification_time
FROM {raw_database}.{raw_table_name} a
JOIN {silver_database}.{silver_table_name} b
    ON a.mcdash_loan_identifier = b.mcdash_loan_identifier
    AND a.as_of_month = b.as_of_month
WHERE a.file_modification_time > b.file_modification_time;

-- Verify column updates
SELECT 
    as_of_month,
    COUNT(*) as total_records,
    COUNT(file_path) as records_with_file_path,
    COUNT(file_modification_time) as records_with_mod_time,
    COUNT(ingest_time) as records_with_ingest_time
FROM {silver_database}.{silver_table_name}
GROUP BY as_of_month
ORDER BY as_of_month DESC;


-- Detailed summary comparison
SELECT 
    r.as_of_month,
    COUNT(DISTINCT r.mcdash_loan_identifier) as raw_distinct_loans,
    COUNT(DISTINCT s.mcdash_loan_identifier) as silver_distinct_loans,
    COUNT(DISTINCT r.mcdash_loan_identifier) - COUNT(DISTINCT s.mcdash_loan_identifier) as difference
FROM {raw_database}.{raw_table_name} r
LEFT JOIN {silver_database}.{silver_table_name} s
    ON r.mcdash_loan_identifier = s.mcdash_loan_identifier
    AND r.as_of_month = s.as_of_month
GROUP BY r.as_of_month
HAVING difference != 0
ORDER BY r.as_of_month;

-- Process state summary
SELECT 
    file_process_state,
    COUNT(*) as state_count,
    MIN(process_date) as earliest_date,
    MAX(process_date) as latest_date,
    SUM(rows_inserted) as total_rows_inserted
FROM {metadata_table_name}
GROUP BY file_process_state;


-- Check processing results by status
SELECT 
    as_of_month,
    result as processing_result,
    COUNT(*) as count
FROM (
    SELECT explode(array_zip(as_of_months, results)) as (as_of_month, result)
    FROM (
        SELECT 
            collect_list(as_of_month) as as_of_months,
            collect_list(result) as results
        FROM {metadata_table_name}
        WHERE process_date >= current_date() - INTERVAL 7 DAYS
    )
)
GROUP BY as_of_month, result
ORDER BY as_of_month DESC;


-- Detailed count comparison with discrepancy check
WITH source_counts AS (
    SELECT 
        as_of_month,
        COUNT(*) as raw_count,
        COUNT(DISTINCT mcdash_loan_identifier) as distinct_loans
    FROM {raw_database}.{raw_table_name}
    GROUP BY as_of_month
),
target_counts AS (
    SELECT 
        as_of_month,
        COUNT(*) as silver_count,
        COUNT(DISTINCT mcdash_loan_identifier) as distinct_loans
    FROM {silver_database}.{silver_table_name}
    GROUP BY as_of_month
)
SELECT 
    COALESCE(s.as_of_month, t.as_of_month) as as_of_month,
    s.raw_count,
    t.silver_count,
    s.distinct_loans as raw_distinct_loans,
    t.distinct_loans as silver_distinct_loans,
    s.raw_count - COALESCE(t.silver_count, 0) as count_difference
FROM source_counts s
FULL OUTER JOIN target_counts t ON s.as_of_month = t.as_of_month
ORDER BY as_of_month DESC;


-- Check recent failures in metadata
SELECT 
    file_path,
    process_date,
    file_process_state,
    rows_inserted,
    last_error_msg
FROM {metadata_table_name}
WHERE file_process_state = 'FAILED'
    AND process_date >= current_date() - INTERVAL 7 DAYS
ORDER BY process_date DESC;

-- Check for any months with mixed success/failure status
SELECT 
    as_of_month,
    COUNT(DISTINCT file_process_state) as distinct_states,
    COLLECT_LIST(file_process_state) as states,
    COLLECT_LIST(last_error_msg) as error_messages
FROM {metadata_table_name}
WHERE process_date >= current_date() - INTERVAL 7 DAYS
GROUP BY as_of_month
HAVING COUNT(DISTINCT file_process_state) > 1
ORDER BY as_of_month DESC;


-- Verify data consistency between raw and silver
SELECT 
    'Inconsistent Records' as check_type,
    r.as_of_month,
    r.mcdash_loan_identifier,
    r.file_modification_time as raw_mod_time,
    s.file_modification_time as silver_mod_time
FROM {raw_database}.{raw_table_name} r
LEFT JOIN {silver_database}.{silver_table_name} s
    ON r.mcdash_loan_identifier = s.mcdash_loan_identifier
    AND r.as_of_month = s.as_of_month
WHERE r.file_modification_time != s.file_modification_time
    OR (r.file_modification_time IS NULL) != (s.file_modification_time IS NULL)
ORDER BY r.as_of_month DESC, r.mcdash_loan_identifier
LIMIT 100;


-- Check processing status summary
WITH status_summary AS (
    SELECT 
        process_date,
        file_process_state,
        rows_inserted,
        CASE 
            WHEN file_process_state = 'FAILED' THEN last_error_msg
            ELSE NULL
        END as error_message
    FROM {metadata_table_name}
    WHERE process_date >= current_date() - INTERVAL 7 DAYS
)
SELECT 
    file_process_state,
    COUNT(*) as count,
    SUM(rows_inserted) as total_rows_inserted,
    COLLECT_LIST(error_message) as unique_errors
FROM status_summary
GROUP BY file_process_state
ORDER BY count DESC;


### Option 1:
SELECT 
    r.as_of_month,
    COUNT(*) as raw_count,
    (SELECT COUNT(*) 
     FROM bk_mpo.heloc s
     WHERE s.as_of_month = r.as_of_month
    ) as silver_count
FROM bk_mpo_raw.heloc r
GROUP BY r.as_of_month
ORDER BY r.as_of_month;

## Option 2: you could use a LEFT JOIN approach which might be clearer
SELECT 
    r.as_of_month,
    COUNT(r.*) as raw_count,
    COUNT(s.*) as silver_count
FROM bk_mpo_raw.heloc r
LEFT JOIN bk_mpo.heloc s
    ON r.as_of_month = s.as_of_month
GROUP BY r.as_of_month
ORDER BY r.as_of_month;

## Option 3: if you want to see counts from both tables even if one is missing records for an as_of_month:
WITH raw_counts AS (
    SELECT as_of_month, COUNT(*) as raw_count
    FROM bk_mpo_raw.heloc
    GROUP BY as_of_month
),
silver_counts AS (
    SELECT as_of_month, COUNT(*) as silver_count
    FROM bk_mpo.heloc
    GROUP BY as_of_month
)
SELECT 
    COALESCE(r.as_of_month, s.as_of_month) as as_of_month,
    COALESCE(r.raw_count, 0) as raw_count,
    COALESCE(s.silver_count, 0) as silver_count
FROM raw_counts r
FULL OUTER JOIN silver_counts s ON r.as_of_month = s.as_of_month
ORDER BY as_of_month;
