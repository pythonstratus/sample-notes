from urllib.request import urlopen
import xml.etree.ElementTree as et
from datetime import datetime as dt
import os

# Base paths setup
BASE_PATH = '/Volumes/staging/fpds'
RAW_PATH = os.path.join(BASE_PATH, 'raw')

def create_dated_folders(date):
    """Create YYYY/MM folder structure and return the path"""
    year = date.strftime('%Y')
    month = date.strftime('%m')
    folder_path = os.path.join(RAW_PATH, year, month)
    os.makedirs(folder_path, exist_ok=True)
    return folder_path

def get_data():
    """Function to get data from the atom feed and return 10 entries each time"""
    request_Index = 0
    request_Increment = 10
    
    while True:
        try:
            # Create request URL string
            request_URL = request_BaseURL + '%20LAST_MOD_DATE:[' + request_ModifiedDate + ']&start=' + str(request_Index)
            print(f"Requesting batch {request_Index}...")
            print(request_URL)
            
            # Submit request URL and save response
            response_XML = urlopen(request_URL).read()
            root = et.fromstring(response_XML)
            
            # Get entries from current batch
            entries = root.findall('{http://www.w3.org/2005/Atom}entry')
            
            if not entries:  # If no entries found
                print(f"No more entries found after {request_Index} entries")
                break
                
            print(f'Successfully retrieved batch: {request_Index} with {len(entries)} entries')
            
            # Yield each entry
            for entry in entries:
                yield et.tostring(entry)
            
            # Increment for next batch
            request_Index += request_Increment
            
        except Exception as e:
            print(f'Error occurred: {str(e)}')
            print(f'Failed URL: {request_URL}')
            raise  # Re-raise the exception to stop processing

def write_data():
    """Function to write entries to XML file with organized folder structure"""
    # Get current date for folder creation
    current_date = dt.now()
    folder_path = create_dated_folders(current_date)
    
    # Create output filename with date
    filename = f'fpds_{current_date.strftime("%Y%m%d")}.xml'
    file_output_path = os.path.join(folder_path, filename)
    
    print(f"Writing to: {file_output_path}")
    entries_count = 0
    
    # Create output file
    with open(file_output_path, 'w') as output_file:
        # Write opening tag
        output_file.write('<?xml version="1.0" encoding="UTF-8"?>\n')
        output_file.write("<feed>\n")
        
        # Write each entry to output file
        for entry_XML in get_data():
            output_file.write(entry_XML.decode("utf-8") + "\n")
            entries_count += 1
            
        # Write closing tag
        output_file.write("</feed>")
    
    print(f"Successfully wrote {entries_count} entries to file")
    return file_output_path

def main():
    # Set Request Defaults
    global request_BaseURL, request_ModifiedDate
    
    request_BaseURL = 'https://www.fpds.gov/dbsight/FEEDS/ATOM?templateName=1.5.3&FEEDNAME=PUBLIC&q=FUNDING_AGENCY_ID:"9555"'
    request_ModifiedDate = '2019/01/01'
    
    # Create base folders if they don't exist
    os.makedirs(RAW_PATH, exist_ok=True)
    
    # Execute main data fetch and write
    output_path = write_data()
    print(f"Process completed. File saved to: {output_path}")

if __name__ == "__main__":
    main()
